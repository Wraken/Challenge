// Code generated by protoc-gen-go. DO NOT EDIT.
// source: balance.proto

package balance

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Transaction struct {
	AccountName          string   `protobuf:"bytes,1,opt,name=AccountName,proto3" json:"AccountName,omitempty"`
	NbMoney              float32  `protobuf:"fixed32,2,opt,name=NbMoney,proto3" json:"NbMoney,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Transaction) Reset()         { *m = Transaction{} }
func (m *Transaction) String() string { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()    {}
func (*Transaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee25a00b628521b1, []int{0}
}

func (m *Transaction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Transaction.Unmarshal(m, b)
}
func (m *Transaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Transaction.Marshal(b, m, deterministic)
}
func (m *Transaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transaction.Merge(m, src)
}
func (m *Transaction) XXX_Size() int {
	return xxx_messageInfo_Transaction.Size(m)
}
func (m *Transaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Transaction.DiscardUnknown(m)
}

var xxx_messageInfo_Transaction proto.InternalMessageInfo

func (m *Transaction) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *Transaction) GetNbMoney() float32 {
	if m != nil {
		return m.NbMoney
	}
	return 0
}

type AccountName struct {
	AccountName          string   `protobuf:"bytes,1,opt,name=AccountName,proto3" json:"AccountName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountName) Reset()         { *m = AccountName{} }
func (m *AccountName) String() string { return proto.CompactTextString(m) }
func (*AccountName) ProtoMessage()    {}
func (*AccountName) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee25a00b628521b1, []int{1}
}

func (m *AccountName) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountName.Unmarshal(m, b)
}
func (m *AccountName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountName.Marshal(b, m, deterministic)
}
func (m *AccountName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountName.Merge(m, src)
}
func (m *AccountName) XXX_Size() int {
	return xxx_messageInfo_AccountName.Size(m)
}
func (m *AccountName) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountName.DiscardUnknown(m)
}

var xxx_messageInfo_AccountName proto.InternalMessageInfo

func (m *AccountName) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

type BalanceReply struct {
	Amount               float32  `protobuf:"fixed32,1,opt,name=Amount,proto3" json:"Amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BalanceReply) Reset()         { *m = BalanceReply{} }
func (m *BalanceReply) String() string { return proto.CompactTextString(m) }
func (*BalanceReply) ProtoMessage()    {}
func (*BalanceReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee25a00b628521b1, []int{2}
}

func (m *BalanceReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BalanceReply.Unmarshal(m, b)
}
func (m *BalanceReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BalanceReply.Marshal(b, m, deterministic)
}
func (m *BalanceReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BalanceReply.Merge(m, src)
}
func (m *BalanceReply) XXX_Size() int {
	return xxx_messageInfo_BalanceReply.Size(m)
}
func (m *BalanceReply) XXX_DiscardUnknown() {
	xxx_messageInfo_BalanceReply.DiscardUnknown(m)
}

var xxx_messageInfo_BalanceReply proto.InternalMessageInfo

func (m *BalanceReply) GetAmount() float32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func init() {
	proto.RegisterType((*Transaction)(nil), "balance.Transaction")
	proto.RegisterType((*AccountName)(nil), "balance.AccountName")
	proto.RegisterType((*BalanceReply)(nil), "balance.BalanceReply")
}

func init() { proto.RegisterFile("balance.proto", fileDescriptor_ee25a00b628521b1) }

var fileDescriptor_ee25a00b628521b1 = []byte{
	// 199 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0x4a, 0xcc, 0x49,
	0xcc, 0x4b, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0x3c, 0xb9,
	0xb8, 0x43, 0x8a, 0x12, 0xf3, 0x8a, 0x13, 0x93, 0x4b, 0x32, 0xf3, 0xf3, 0x84, 0x14, 0xb8, 0xb8,
	0x1d, 0x93, 0x93, 0xf3, 0x4b, 0xf3, 0x4a, 0xfc, 0x12, 0x73, 0x53, 0x25, 0x18, 0x15, 0x18, 0x35,
	0x38, 0x83, 0x90, 0x85, 0x84, 0x24, 0xb8, 0xd8, 0xfd, 0x92, 0x7c, 0xf3, 0xf3, 0x52, 0x2b, 0x25,
	0x98, 0x14, 0x18, 0x35, 0x98, 0x82, 0x60, 0x5c, 0x25, 0x7d, 0x14, 0xbd, 0x84, 0x8d, 0x52, 0x52,
	0xe3, 0xe2, 0x71, 0x82, 0x38, 0x23, 0x28, 0xb5, 0x20, 0xa7, 0x52, 0x48, 0x8c, 0x8b, 0xcd, 0x31,
	0x17, 0x24, 0x0b, 0x56, 0xcc, 0x14, 0x04, 0xe5, 0x19, 0x1d, 0x66, 0xe4, 0x62, 0x87, 0x2a, 0x14,
	0xb2, 0xe6, 0xe2, 0x72, 0x4f, 0x2d, 0x81, 0xf1, 0x44, 0xf4, 0x60, 0xde, 0x42, 0x32, 0x57, 0x4a,
	0x14, 0x2e, 0x8a, 0x6c, 0xbc, 0x12, 0x83, 0x90, 0x0d, 0x17, 0xb7, 0x73, 0x51, 0x6a, 0x4a, 0x66,
	0x09, 0xd8, 0xc1, 0x48, 0xba, 0x91, 0x82, 0x00, 0xb7, 0x6e, 0x5b, 0x2e, 0x1e, 0x97, 0xd4, 0x82,
	0xfc, 0x62, 0xf2, 0xb4, 0x27, 0xb1, 0x81, 0x43, 0xde, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x01,
	0x4f, 0x0d, 0x9a, 0x8a, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BalanceClient is the client API for Balance service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BalanceClient interface {
	GetBalance(ctx context.Context, in *AccountName, opts ...grpc.CallOption) (*BalanceReply, error)
	CreditMoney(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*BalanceReply, error)
	DepositMoney(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*BalanceReply, error)
}

type balanceClient struct {
	cc *grpc.ClientConn
}

func NewBalanceClient(cc *grpc.ClientConn) BalanceClient {
	return &balanceClient{cc}
}

func (c *balanceClient) GetBalance(ctx context.Context, in *AccountName, opts ...grpc.CallOption) (*BalanceReply, error) {
	out := new(BalanceReply)
	err := c.cc.Invoke(ctx, "/balance.Balance/GetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *balanceClient) CreditMoney(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*BalanceReply, error) {
	out := new(BalanceReply)
	err := c.cc.Invoke(ctx, "/balance.Balance/CreditMoney", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *balanceClient) DepositMoney(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*BalanceReply, error) {
	out := new(BalanceReply)
	err := c.cc.Invoke(ctx, "/balance.Balance/DepositMoney", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BalanceServer is the server API for Balance service.
type BalanceServer interface {
	GetBalance(context.Context, *AccountName) (*BalanceReply, error)
	CreditMoney(context.Context, *Transaction) (*BalanceReply, error)
	DepositMoney(context.Context, *Transaction) (*BalanceReply, error)
}

// UnimplementedBalanceServer can be embedded to have forward compatible implementations.
type UnimplementedBalanceServer struct {
}

func (*UnimplementedBalanceServer) GetBalance(ctx context.Context, req *AccountName) (*BalanceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (*UnimplementedBalanceServer) CreditMoney(ctx context.Context, req *Transaction) (*BalanceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreditMoney not implemented")
}
func (*UnimplementedBalanceServer) DepositMoney(ctx context.Context, req *Transaction) (*BalanceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositMoney not implemented")
}

func RegisterBalanceServer(s *grpc.Server, srv BalanceServer) {
	s.RegisterService(&_Balance_serviceDesc, srv)
}

func _Balance_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BalanceServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/balance.Balance/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BalanceServer).GetBalance(ctx, req.(*AccountName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Balance_CreditMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BalanceServer).CreditMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/balance.Balance/CreditMoney",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BalanceServer).CreditMoney(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Balance_DepositMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BalanceServer).DepositMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/balance.Balance/DepositMoney",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BalanceServer).DepositMoney(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

var _Balance_serviceDesc = grpc.ServiceDesc{
	ServiceName: "balance.Balance",
	HandlerType: (*BalanceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBalance",
			Handler:    _Balance_GetBalance_Handler,
		},
		{
			MethodName: "CreditMoney",
			Handler:    _Balance_CreditMoney_Handler,
		},
		{
			MethodName: "DepositMoney",
			Handler:    _Balance_DepositMoney_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "balance.proto",
}
